//+------------------------------------------------------------------+
//|                                                      ProjectName |
//|                                      Copyright 2020, CompanyName |
//|                                       http://www.companyname.net |
//+------------------------------------------------------------------+
#property description "Atentie alegere MaxDdrawdownLoss si Volume"
#property description "Buttons: X-Close All(robot)"
#property description "         E-Close Profitable All(robot)"


#include <Trade/Trade.mqh>
CTrade trade;
//+------------------------------------------------------------------+
//| Inputs                                                           |
//+------------------------------------------------------------------+
input group "----> General Inputs <----";
input long InpMagicNumber=181105;//Magic Number
input double InpLacatValue=60;//Value Lacat Acivation
input int InpStartLevel=180;//Start Level
input int InpStepLevel=60;//Step Level

input group "----> Volumes Inputs <----";
input double InpVol0=0.01;
input double InpVol1=0.01;
input double InpVol2=0.01;
input double InpVol3=0.02;
input double InpVol4=0.04;
input double InpVol5=0.06;
input double InpVol6=0.1;
input double InpVol7=0.1;
input group "----> Profits Inputs <----";
input double InpProfit1=1;
input double InpProfit2=1;
input double InpProfit3=1;
input double InpProfit4=1;
input double InpProfit5=1;
input double InpProfit6=1;
input double InpProfit7=1;
input group "----> Time Filter 1<----";
input int InpTimeStartHour = 15;// Start Hour
input int InpTimeStartMin  = 29;//Start Minute
input int InpTimeEndHour   = 20;//End Hour
input int InpTimeEndMin    = 0;//End Minute

input group "----> Time Filter 2<----";
input bool InpSecondTimeFilter=true;//Second Time Filter(optional)
input int InpTimeStartHour1 = 15;// Start Hour
input int InpTimeStartMin1  = 29;//Start Minute
input int InpTimeEndHour1   = 20;//End Hour
input int InpTimeEndMin1    = 0;//End Minute
#define KEY_X 88
#define KEY_E 69
#define KEY_H 72
#define KEY_S 83

ulong ticketnumber=-1;
double Price_Level=0;

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit()
  {
   trade.SetExpertMagicNumber(InpMagicNumber);
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {

  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void  OnChartEvent(const int       id,       const long&     lparam,    const double&   dparam,   const string&   sparam)
  {
   if(id==CHARTEVENT_KEYDOWN)
     {
      if(lparam==KEY_E)
        {
         for(int i=0; i<PositionsTotal(); i++)
           {
            ulong currticket=PositionGetTicket(i);
            ulong magicnumber=PositionGetInteger(POSITION_MAGIC);
            if(PositionSelectByTicket(currticket))
              {
               if(PositionGetDouble(POSITION_PROFIT)>0.01)
                 {
                  if(InpMagicNumber==magicnumber)
                    {
                     trade.PositionClose(currticket);
                    }
                 }
              }
           }
        }
     }
   if(id==CHARTEVENT_KEYDOWN)
     {
      if(lparam==KEY_X)
        {
         CloseAllPositions();
        }
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick()
  {
//TIMEFILTER
   datetime LocalTime=TimeLocal();

   MqlDateTime DateTimeStructure;
   TimeCurrent(DateTimeStructure);
   DateTimeStructure.sec=0;
   TimeToStruct(LocalTime,DateTimeStructure);

   DateTimeStructure.hour=InpTimeStartHour;
   DateTimeStructure.min=InpTimeStartMin;
   datetime timeStart=StructToTime(DateTimeStructure);

   DateTimeStructure.hour=InpTimeEndHour;
   DateTimeStructure.min=InpTimeEndMin;
   datetime timeEnd=StructToTime(DateTimeStructure);

   DateTimeStructure.hour=InpTimeStartHour1;
   DateTimeStructure.min=InpTimeStartMin1;
   datetime timeStart2=StructToTime(DateTimeStructure);

   DateTimeStructure.hour=InpTimeEndHour1;
   DateTimeStructure.min=InpTimeEndMin1;
   datetime timeEnd2=StructToTime(DateTimeStructure);
   bool isTime = TimeCurrent() >timeStart && TimeCurrent() <timeEnd; //se afla in range
   bool isTime2= TimeCurrent() >timeStart2 && TimeCurrent() <timeEnd2 && InpSecondTimeFilter==true;
   if(isTime==true || isTime2==true)
     {
      if(Check_Activation_Lacat(Check_Open_Buy_Positions(),Check_Open_Sell_Positions())!=1)
        {
         Open_Buy_Sell_Initial();
         Open_Buy_Sell_Levels();
         TrailProfitLossWithoutStop(Determine_Profit_Levels(Check_Open_Buy_Positions()),0.5);
        }
      else
        {
         Activate_Lacat_Sleep_Robot();
        }
     }
   else
      if(Determine_Profit_Levels(((Check_Open_Buy_Positions()+Check_Open_Sell_Positions())-1)/2)<Determine_Account_Profit())
        {
         CloseAllPositions();
        }
      else
         if((Check_Open_Buy_Positions()+Check_Open_Sell_Positions())!=0)
           {
            if(Check_Activation_Lacat(Check_Open_Buy_Positions(),Check_Open_Sell_Positions())!=1)
              {
               Open_Buy_Sell_Initial();
               Open_Buy_Sell_Levels();
               TrailProfitLossWithoutStop(Determine_Profit_Levels(Check_Open_Buy_Positions()),0.5);
              }
            else
              {
               Activate_Lacat_Sleep_Robot();
              }
           }

  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int Check_Open_Buy_Positions()
  {
   int cnt=0;
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      ulong ticket=PositionGetTicket(i);//get ticket
      ulong magicnumber=-1;
      PositionGetInteger(POSITION_MAGIC,magicnumber);
      if(PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_BUY)
        {
         if(InpMagicNumber==magicnumber)
           {
            cnt++;
           }

        }

     }
   return cnt;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int Check_Open_Sell_Positions()
  {
   int cnt=0;
   for(int i=PositionsTotal()-1; i>=0; i--)
     {
      ulong ticket=PositionGetTicket(i);//get ticket
      ulong magicnumber=-1;
      PositionGetInteger(POSITION_MAGIC,magicnumber);
      if(PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_SELL)
        {
         if(InpMagicNumber==magicnumber)
           {
            cnt++;
           }

        }

     }
   return cnt;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Check_Starting_Level()
  {
   double price=-1;
   for(int i=PositionsTotal(); i>=0; i--)
     {
      ulong ticket=PositionGetTicket(i);//get ticket
      ulong magicnumber=-1;
      PositionGetInteger(POSITION_MAGIC,magicnumber);
  
         if(ticket==ticketnumber)
           {
            if(PositionSelectByTicket(ticket))
              {
               if(InpMagicNumber==magicnumber)
                 {
                  price=PositionGetDouble(POSITION_PRICE_OPEN);
                 }
              }
           }
        

     }
   return price;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Open_Buy_Sell_Initial()
  {
   double ask=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_ASK),_Digits);
   double bid=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_BID),_Digits);
   
   if(Check_Open_Buy_Positions()==0)
     {
      if(trade.Buy(InpVol0,NULL,ask,0,0,"BUY_0"))
        {
         ticketnumber=trade.ResultOrder();
        }
      else
        {
         Print("Can not open BUY_0");
        }
         
     }
     if(Check_Open_Buy_Positions()==1)
     {
     Price_Level=NormalizeDouble(Check_Starting_Level(),_Digits);
         Print(Price_Level);
         }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Determine_Volumes_Mediere(int number)
  {
   double lot = InpVol0; // Default lot size
   switch(number)
     {
      case 0:
         lot = InpVol0; // Lot size for case 1
         break;
      case 1:
         lot = InpVol1; // Lot size for case 1
         break;

      case 2:
         lot = InpVol2; // Lot size for case 2
         break;
      case 3:
         lot = InpVol3; // Lot size for case 1
         break;

      case 4:
         lot = InpVol4; // Lot size for case 2
         break;
      case 5:
         lot = InpVol5; // Lot size for case 2
         break;
      case 6:
         lot = InpVol6; // Lot size for case 1
         break;

      case 7:
         lot = InpVol7; // Lot size for case 2
         break;
      default:
         lot=-1;
         break;
     }

   return lot; // Assuming lot is what needs to be returned
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Determine_Profit_Levels(int number)
  {
   double profit = InpProfit1; // Default lot size
   switch(number)
     {
      case 1:
         profit = InpProfit1; // profit size for case 1
         break;

      case 2:
         profit = InpProfit2; // profit size for case 2
         break;
      case 3:
         profit = InpProfit3; // profit size for case 1
         break;

      case 4:
         profit = InpProfit4; // profit size for case 2
         break;
      case 5:
         profit = InpProfit5; // profit size for case 2
         break;
      case 6:
         profit = InpProfit6; // profit size for case 1
         break;

      case 7:
         profit = InpProfit7; // profit size for case 2
         break;
      default:
         profit=1;
         break;
     }
   return profit;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CloseAllPositions()
  {
   for(int i = PositionsTotal(); i >= 0; i--)
     {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
        {
         ulong magicnumber = PositionGetInteger(POSITION_MAGIC);
         if(magicnumber == InpMagicNumber)
           {
            trade.PositionClose(ticket);
           }
        }
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Open_Buy_Sell_Levels()
  {
   double ask=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_ASK),_Digits);
   double bid=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_BID),_Digits);
//Print(Price_Level);
   if(ask<NormalizeDouble(Price_Level-InpStartLevel*_Point,_Digits))
     {
      if(trade.Buy(Determine_Volumes_Mediere(Check_Open_Buy_Positions()),NULL,ask,0,0,"BUYS"))
        {
         Price_Level=NormalizeDouble(Price_Level-InpStepLevel*_Point,_Digits);
         Print(Price_Level);
        }
      else
        {
         Print("Can not open BUYS");
        }
     }
   if(Determine_Profit_Levels(Check_Open_Buy_Positions())<Determine_Account_Profit())
     {
      CloseAllPositions();
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Determine_Account_Profit()
  {
   double profit = 0.0;
   for(int i = PositionsTotal() - 1; i >= 0; i--)
     {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
        {
         ulong magicnumber = PositionGetInteger(POSITION_MAGIC);
         if(InpMagicNumber == magicnumber)
           {
            profit += PositionGetDouble(POSITION_PROFIT);
           }
        }
     }
   return profit;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int Check_Activation_Lacat(int nrS, int nrB)
  {
   int status=-1;
   if(nrB==0 && nrS==0)
     {
      status=0;
     }
   if(Determine_Account_Profit()<(-1)*InpLacatValue)
     {
      status=1;
     }
   return status;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Activate_Lacat_Sleep_Robot()
  {
   double ask=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_ASK),_Digits);
   double bid=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_BID),_Digits);

   double SumLot=InpVol0+InpVol1+InpVol2+InpVol3+InpVol4+InpVol5+InpVol6+InpVol7;
   if(Check_Open_Buy_Positions()==8 && Check_Open_Sell_Positions()==0)
     {
      if(trade.Sell(SumLot,NULL,bid,0,0,"LACAT"))
        {
         SendNotification("Lacat Deschis-Robot Sleep");
        }
     }
  }
//+------------------------------------------------------------------+
//| Function to trail P&L and close all positions if conditions met  |
//| Parameters:                                                      |
//|    trailStart - Minimum profit to start trailing                 |
//|    trailStep  - Trailing step for profit threshold               |
//|    Close_All_Positions - External function to close all positions|
//+------------------------------------------------------------------+
void TrailProfitLossWithoutStop(double trailStart, double trailStep)
{
   static double maxProfit = 0.0; // To track the highest profit
   
   // Update the maximum profit if it exceeds the previous maximum
   if (Determine_Account_Profit() > maxProfit)
   {
      maxProfit = Determine_Account_Profit();
   }

   // Check if trailing should be applied
   if (maxProfit >= trailStart)
   {
      double trailingThreshold = maxProfit - trailStep;
      Print("Trailing active. Max Profit: ", maxProfit, ", Trailing Threshold: ", trailingThreshold);

      // If total profit falls below the trailing threshold, close all positions
      if (Determine_Account_Profit() < trailingThreshold)
      {
         Print("Profit below trailing threshold. Closing all positions.");
         CloseAllPositions();
         maxProfit = 0.0; // Reset maxProfit after closing positions
      }
   }
   else
   {
      Print("Profit below trail start threshold. No trailing applied.");
   }
}

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
